"use client"
import { useEffect, useRef, useState } from "react"
import ChaSrc from "@/assets/images/cha.svg"
import CharImageSrc from '@/assets/images/cha2.png'
export const MazeMaker = (props: any) => {
    const canvas = useRef<HTMLCanvasElement>(null)
    const keyList = ["ArrowUp", "ArrowRight", "ArrowDown", "ArrowLeft"]
    const [keyFlag, setKeyFlag] = useState({
        ArrowUp: false,
        ArrowRight: false,
        ArrowDown: false,
        ArrowLeft: false
    })

    useEffect(() => {
        animate()
    }, [])

    useEffect(() => {
        const keyDownHandler = (e: KeyboardEvent) => {
            keyList.forEach((key, index) => {
                if (e.code === key) {
                    setKeyFlag({ ...keyFlag, [key]: true })
                }
            });
        };
        const keyUpHandler = (e: KeyboardEvent) => {
            keyList.forEach((key, index) => {
                if (e.code === key) {
                    setKeyFlag({ ...keyFlag, [key]: false })
                }
            });
        };
        document.addEventListener('keydown', keyDownHandler);
        document.addEventListener('keyup', keyUpHandler);
        return () => {
            document.removeEventListener('keydown', keyDownHandler);
            document.removeEventListener('keyup', keyUpHandler);
        };
    }, []);

    const drawPlayer = () => {
        const ctx = canvas.current!.getContext('2d')!
        const scale = 0.125
        ctx.save();
        ctx.strokeStyle = "rgba(0,0,0,0)";
        ctx.miterLimit = 4;
        ctx.font = "15px ''";
        ctx.font = "   15px ''";
        ctx.scale(scale, scale);
        ctx.save();
        ctx.fillStyle = "#FED247";
        ctx.font = "   15px ''";
        ctx.translate(155, 4);
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.bezierCurveTo(0.68368652, 0.20898926, 1.36737305, 0.41797852, 2.07177734, 0.63330078);
        ctx.bezierCurveTo(31.23312042, 9.83887964, 57.1417972, 30.93837842, 71.35766602, 58.09228516);
        ctx.bezierCurveTo(72.99175715, 61.35733023, 74.51712342, 64.66396538, 76, 68);
        ctx.bezierCurveTo(76.72316406, 69.59908203, 76.72316406, 69.59908203, 77.4609375, 71.23046875);
        ctx.bezierCurveTo(87.59099816, 95.45052288, 88.84345059, 125.93100964, 81, 151);
        ctx.bezierCurveTo(80.68651611, 152.02552979, 80.68651611, 152.02552979, 80.36669922, 153.07177734);
        ctx.bezierCurveTo(71.16112036, 182.23312042, 50.06162158, 208.1417972, 22.90771484, 222.35766602);
        ctx.bezierCurveTo(19.64266977, 223.99175715, 16.33603462, 225.51712342, 13, 227);
        ctx.bezierCurveTo(11.93394531, 227.48210937, 10.86789063, 227.96421875, 9.76953125, 228.4609375);
        ctx.bezierCurveTo(-14.45052288, 238.59099816, -44.93100964, 239.84345059, -70, 232);
        ctx.bezierCurveTo(-71.02552979, 231.68651611, -71.02552979, 231.68651611, -72.07177734, 231.36669922);
        ctx.bezierCurveTo(-101.23312042, 222.16112036, -127.1417972, 201.06162158, -141.35766602, 173.90771484);
        ctx.bezierCurveTo(-142.99175715, 170.64266977, -144.51712342, 167.33603462, -146, 164);
        ctx.bezierCurveTo(-146.48210937, 162.93394531, -146.96421875, 161.86789063, -147.4609375, 160.76953125);
        ctx.bezierCurveTo(-157.59099816, 136.54947712, -158.84345059, 106.06899036, -151, 81);
        ctx.bezierCurveTo(-150.79101074, 80.31631348, -150.58202148, 79.63262695, -150.36669922, 78.92822266);
        ctx.bezierCurveTo(-141.16112036, 49.76687958, -120.06162158, 23.8582028, -92.90771484, 9.64233398);
        ctx.bezierCurveTo(-89.64266977, 8.00824285, -86.33603462, 6.48287658, -83, 5);
        ctx.bezierCurveTo(-81.93394531, 4.51789062, -80.86789063, 4.03578125, -79.76953125, 3.5390625);
        ctx.bezierCurveTo(-55.54947712, -6.59099816, -25.06899036, -7.84345059, 0, 0);
        ctx.closePath();
        ctx.moveTo(-29, 48);
        ctx.bezierCurveTo(-34.09105238, 56.00442917, -34.71612339, 63.62901394, -34, 73);
        ctx.bezierCurveTo(-32.19183983, 80.36335107, -27.28636615, 87.27374506, -20.875, 91.3515625);
        ctx.bezierCurveTo(-12.8371213, 95.45915493, -4.23604399, 96.53133625, 4.640625, 94.3515625);
        ctx.bezierCurveTo(12.60765098, 91.0923246, 18.79691768, 85.67058816, 22.30859375, 77.796875);
        ctx.bezierCurveTo(25.11714696, 70.49781017, 25.4312509, 61.44305775, 22.4375, 54.125);
        ctx.bezierCurveTo(17.68335744, 45.16719455, 11.50385521, 40.16795174, 2, 37);
        ctx.bezierCurveTo(-10.88681747, 35.989594, -20.22519621, 38.15316136, -29, 48);
        ctx.closePath();
        ctx.moveTo(-87.84765625, 45.75);
        ctx.bezierCurveTo(-88.94400391, 46.86375, -88.94400391, 46.86375, -90.0625, 48);
        ctx.bezierCurveTo(-91.16271484, 49.11375, -91.16271484, 49.11375, -92.28515625, 50.25);
        ctx.bezierCurveTo(-93.13400391, 51.11625, -93.13400391, 51.11625, -94, 52);
        ctx.bezierCurveTo(-90.19524578, 56.56030824, -86.25030379, 60.85089392, -82, 65);
        ctx.bezierCurveTo(-83.58667578, 68.90285767, -86.13350481, 71.33520982, -89.125, 74.25);
        ctx.bezierCurveTo(-90.49011719, 75.58804688, -90.49011719, 75.58804688, -91.8828125, 76.953125);
        ctx.bezierCurveTo(-92.58148438, 77.62859375, -93.28015625, 78.3040625, -94, 79);
        ctx.bezierCurveTo(-93.06725891, 80.12894876, -92.12859878, 81.25300876, -91.1875, 82.375);
        ctx.bezierCurveTo(-90.66542969, 83.00148437, -90.14335938, 83.62796875, -89.60546875, 84.2734375);
        ctx.bezierCurveTo(-87.91774261, 86.2221048, -87.91774261, 86.2221048, -85, 88);
        ctx.bezierCurveTo(-81.04, 84.04, -77.08, 80.08, -73, 76);
        ctx.bezierCurveTo(-68.98012591, 78.00993705, -66.85483005, 79.93846389, -63.75, 83.125);
        ctx.bezierCurveTo(-62.85796875, 84.03507812, -61.9659375, 84.94515625, -61.046875, 85.8828125);
        ctx.bezierCurveTo(-60.37140625, 86.58148438, -59.6959375, 87.28015625, -59, 88);
        ctx.bezierCurveTo(-55.23511958, 86.27845212, -52.84936103, 84.00765886, -50, 81);
        ctx.bezierCurveTo(-51.58667578, 77.09714233, -54.13350481, 74.66479018, -57.125, 71.75);
        ctx.bezierCurveTo(-58.03507812, 70.85796875, -58.94515625, 69.9659375, -59.8828125, 69.046875);
        ctx.bezierCurveTo(-60.58148438, 68.37140625, -61.28015625, 67.6959375, -62, 67);
        ctx.bezierCurveTo(-60.41332422, 63.09714233, -57.86649519, 60.66479018, -54.875, 57.75);
        ctx.bezierCurveTo(-53.96492188, 56.85796875, -53.05484375, 55.9659375, -52.1171875, 55.046875);
        ctx.bezierCurveTo(-51.41851562, 54.37140625, -50.71984375, 53.6959375, -50, 53);
        ctx.bezierCurveTo(-51.72154788, 49.23511958, -53.99234114, 46.84936103, -57, 44);
        ctx.bezierCurveTo(-60.90285767, 45.58667578, -63.33520982, 48.13350481, -66.25, 51.125);
        ctx.bezierCurveTo(-67.14203125, 52.03507812, -68.0340625, 52.94515625, -68.953125, 53.8828125);
        ctx.bezierCurveTo(-69.62859375, 54.58148438, -70.3040625, 55.28015625, -71, 56);
        ctx.bezierCurveTo(-74.89978363, 54.41826958, -77.29210533, 51.87731471, -80.1875, 48.875);
        ctx.bezierCurveTo(-81.77516337, 47.23387212, -83.37505692, 45.60422432, -85, 44);
        ctx.bezierCurveTo(-86.30313847, 43.88539008, -86.30313847, 43.88539008, -87.84765625, 45.75);
        ctx.closePath();
        ctx.moveTo(-108.6015625, 123.01953125);
        ctx.bezierCurveTo(-114.21064528, 131.59716369, -114.81796243, 139.91179672, -114, 150);
        ctx.bezierCurveTo(-112.15374226, 158.62365955, -106.84679794, 165.36046308, -99.8671875, 170.6015625);
        ctx.bezierCurveTo(-88.33134044, 177.67192038, -74.30504461, 176.2464792, -61.3125, 176.125);
        ctx.bezierCurveTo(-59.43555165, 176.11494984, -57.55859809, 176.10582759, -55.68164062, 176.09765625);
        ctx.bezierCurveTo(-51.12096327, 176.07580469, -46.5605402, 176.0413871, -42, 176);
        ctx.bezierCurveTo(-45.1032903, 171.25330538, -45.1032903, 171.25330538, -48.62109375, 166.81640625);
        ctx.bezierCurveTo(-49.08193359, 166.28080078, -49.54277344, 165.74519531, -50.01757812, 165.19335938);
        ctx.bezierCurveTo(-50.48615234, 164.65517578, -50.95472656, 164.11699219, -51.4375, 163.5625);
        ctx.bezierCurveTo(-52.37647317, 162.4828762, -53.31267623, 161.40083693, -54.24609375, 160.31640625);
        ctx.bezierCurveTo(-54.71394287, 159.78200928, -55.18179199, 159.2476123, -55.66381836, 158.69702148);
        ctx.bezierCurveTo(-57, 157, -57, 157, -58.07250977, 155.05493164);
        ctx.bezierCurveTo(-59.23435872, 152.99427906, -60.19513983, 151.53877128, -62, 150);
        ctx.bezierCurveTo(-65.6949063, 149.10091243, -69.27785703, 149.20154955, -73.0625, 149.3125);
        ctx.bezierCurveTo(-83.26002508, 149.49117176, -83.26002508, 149.49117176, -86.6953125, 147.2109375);
        ctx.bezierCurveTo(-88.63623297, 143.92183275, -87.88380983, 141.60322469, -87, 138);
        ctx.bezierCurveTo(-84.84131188, 135.84131188, -79.81546016, 136.81024866, -76.81787109, 136.79125977);
        ctx.bezierCurveTo(-75.85361206, 136.78147598, -74.88935303, 136.7716922, -73.89587402, 136.76161194);
        ctx.bezierCurveTo(-70.68840938, 136.73157408, -67.48098679, 136.71024609, -64.2734375, 136.69140625);
        ctx.bezierCurveTo(-63.1798354, 136.68483442, -62.08623329, 136.6782626, -60.95949173, 136.67149162);
        ctx.bezierCurveTo(-55.16783187, 136.63885683, -49.37619069, 136.61441944, -43.58447266, 136.5949707);
        ctx.bezierCurveTo(-38.78862699, 136.57717038, -33.99337071, 136.54237576, -29.19775391, 136.49243164);
        ctx.bezierCurveTo(-23.41288766, 136.43224743, -17.6285673, 136.40149631, -11.84340286, 136.39179802);
        ctx.bezierCurveTo(-9.63858321, 136.38323648, -7.43377838, 136.36440133, -5.22913742, 136.3350544);
        ctx.bezierCurveTo(-2.1382783, 136.29613568, 0.95045785, 136.29510655, 4.04150391, 136.30297852);
        ctx.bezierCurveTo(5.40400772, 136.2729776, 5.40400772, 136.2729776, 6.79403687, 136.24237061);
        ctx.bezierCurveTo(12.45709703, 136.30698139, 15.44577851, 137.40684014, 19.53084373, 141.37287807);
        ctx.bezierCurveTo(22.05775518, 144.17148645, 24.41980719, 147.05087343, 26.6875, 150.0625);
        ctx.bezierCurveTo(27.60795826, 151.26180676, 28.52852919, 152.46102705, 29.44921875, 153.66015625);
        ctx.bezierCurveTo(30.09383057, 154.50731201, 30.09383057, 154.50731201, 30.75146484, 155.37158203);
        ctx.bezierCurveTo(32.46671116, 157.60871401, 34.22945472, 159.80651416, 36, 162);
        ctx.bezierCurveTo(38.43766867, 161.03210215, 39.77066266, 160.33621987, 41.265625, 158.14453125);
        ctx.bezierCurveTo(44.73397762, 149.92783872, 45.56191944, 141.01953224, 43.3046875, 132.3203125);
        ctx.bezierCurveTo(42.37122919, 130.05334232, 41.30586361, 128.07305848, 40, 126);
        ctx.bezierCurveTo(39.38125, 124.95585937, 39.38125, 124.95585937, 38.75, 123.890625);
        ctx.bezierCurveTo(33.88243082, 116.53395795, 26.41689717, 112.27672589, 18, 110);
        ctx.bezierCurveTo(14.58208903, 109.70420914, 11.17622191, 109.70621435, 7.74707031, 109.70947266);
        ctx.bezierCurveTo(6.21903275, 109.69939682, 6.21903275, 109.69939682, 4.66012573, 109.68911743);
        ctx.bezierCurveTo(1.2994089, 109.67015265, -2.06110801, 109.66621379, -5.421875, 109.6640625);
        ctx.bezierCurveTo(-7.76589031, 109.65763291, -10.10990482, 109.65090443, -12.45391846, 109.64389038);
        ctx.bezierCurveTo(-17.3664333, 109.63192096, -22.27887785, 109.62820916, -27.19140625, 109.62939453);
        ctx.bezierCurveTo(-33.47029369, 109.62959755, -39.74872769, 109.60231055, -46.02750778, 109.56785011);
        ctx.bezierCurveTo(-50.86954802, 109.54555416, -55.71147967, 109.54155785, -60.55356598, 109.54261398);
        ctx.bezierCurveTo(-62.86750092, 109.54026151, -65.18143902, 109.53145808, -67.49532318, 109.51594925);
        ctx.bezierCurveTo(-70.74036402, 109.49623794, -73.98443395, 109.50214838, -77.22949219, 109.51416016);
        ctx.bezierCurveTo(-78.17529144, 109.50292114, -79.1210907, 109.49168213, -80.09555054, 109.48010254);
        ctx.bezierCurveTo(-91.22290016, 109.58417119, -101.59562118, 114.18521013, -108.6015625, 123.01953125);
        ctx.closePath();
        ctx.moveTo(-40, 150);
        ctx.bezierCurveTo(-39.05377978, 151.26368257, -38.10727143, 152.52714939, -37.16064453, 153.79052734);
        ctx.bezierCurveTo(-36.63358917, 154.49414398, -36.10653381, 155.19776062, -35.56350708, 155.92269897);
        ctx.bezierCurveTo(-20.11915057, 178.7809038, -20.11915057, 178.7809038, 1, 195);
        ctx.bezierCurveTo(6.8184969, 195.64649966, 12.19078093, 195.82525782, 17.5625, 193.375);
        ctx.bezierCurveTo(21.76514152, 189.28011851, 24.21897144, 186.13950953, 24.625, 180.1875);
        ctx.bezierCurveTo(24.37844989, 175.4326051, 23.13391754, 172.50988184, 20.15551758, 168.82495117);
        ctx.bezierCurveTo(18.45598866, 166.59760389, 17.04310271, 164.44646719, 15.60351562, 162.05908203);
        ctx.bezierCurveTo(10.43093436, 153.99889628, 10.43093436, 153.99889628, 2.4624939, 149.14935303);
        ctx.bezierCurveTo(-4.45007478, 148.01213517, -11.35826507, 148.53642078, -18.3125, 149);
        ctx.bezierCurveTo(-20.42095181, 149.08040225, -22.52970046, 149.15338087, -24.63867188, 149.21875);
        ctx.bezierCurveTo(-29.7665437, 149.39369684, -34.87994661, 149.66874927, -40, 150);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        ctx.restore();
        ctx.save();
        ctx.fillStyle = "#FDD248";
        ctx.font = "   15px ''";
        ctx.translate(157.375, 59.75);
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.bezierCurveTo(3.96220871, 3.3961789, 4.49510792, 4.90778181, 5, 10.125);
        ctx.bezierCurveTo(4.88735068, 14.43785966, 3.45117939, 16.95279071, 0.625, 20.25);
        ctx.bezierCurveTo(-2.36312362, 22.59781141, -5.59411188, 22.66825081, -9.34375, 22.5703125);
        ctx.bezierCurveTo(-13.41825238, 21.92779482, -16.25254791, 19.67857538, -18.75, 16.5);
        ctx.bezierCurveTo(-20.19899408, 11.28362133, -20.07553657, 7.60103481, -17.625, 2.875);
        ctx.bezierCurveTo(-12.72832137, -2.83779173, -6.58393652, -3.41389301, 0, 0);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        ctx.restore();
        ctx.restore();

    }

    function drawFrame(frame: any[][]) {
        const ctx = canvas.current!.getContext('2d')!
        ctx.clearRect(0, 0, canvas.current!.width, canvas.current!.height);
        const pixelSize = canvas.current!.height / frame.length
        frame.forEach((line, y) => {
            line.forEach((dot, x) => {
                if (dot === 1) {
                    ctx.fillStyle = "black"
                    ctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);
                }
                if (dot === 0) {
                    ctx.fillStyle = "green"
                    ctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);
                }
                if (props.mazeData.start.y === y && props.mazeData.start.x === x) {
                    ctx.fillStyle = "pink"
                    ctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);
                }
                if (props.mazeData.end.y === y && props.mazeData.end.x === x) {
                    ctx.fillStyle = "red"
                    ctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);
                }
            })
        })


    }

    function animate() {
        requestAnimationFrame(animate);
        drawFrame(props.mazeData.mazeData);
        drawPlayer()
    }



    return (
        <>
            <canvas ref={canvas} width={500} height={500} />
        </>
    )
}
